!
~!share/js/CSVFile.js~
/*
 *  PureJavacript, CSVFile.js
 *
 *  Copyright 2014 - 2017, CrossAdaptive
 */
~
!





.. CSVFile

A CSVFile file is instantiated by passing the content of a loaded CSV file into the contructor.
The implementation assumes that the first line of the CSV contains column titles that correctly correspond to included data.

~
CSVFile( file_content )
CSVFile.prototype.getValueFor
CSVFile.prototype.getValue
CSVFile.prototype.getNrOfRows
~

Generally, a CSVFile is loaded and then iterated through to retrieve values for some purpose.
A common use is to load the values into an HTML table (see Load.Table).

~
var csv_file = new CSVFile( text );
var n        = csv_file.getNrOfRows();

for ( var i=0; i < n; i++ )
{
    var username = csv_file.getValueFor( i, ["First name", "Firstname", "Given name", "Given names"] );
    ...
}
~




... CSVFile

|
CSVFile( file_content )
|

~share/js/CSVFile.js~
function CSVFile( file_content )
{
	this.headers = new Array();
	this.rows    = new Array();

	this.parseContent( file_content );
}
~



... getValueFor

|
getValueFor( row, labels )
|

Searches the 'row' specified for the first of the labels specified in array that has a value.
This allows CSV files that have inconsistent column titles, e.g., "Given name" or "Given names", to be searched.

~share/js/CSVFile.js~
CSVFile.prototype.getValueFor
=
function( row, labels )
{
	var value = "";
	var n     = labels.length;

	for ( var i=0; i < n; i++ )
	{
		var value = this.getValue( row, labels[i] );
		
		if ( "" != value ) break;
	}

	return value;
}
~



~share/js/CSVFile.js~
CSVFile.prototype.getValue
=
function( row, label )
{
	var value  = "";
	var column = -1;
	var n      = this.headers.length;
	
	for ( var i=0; i < n; i++ )
	{
		var text1 = label.toLowerCase().trim();
		var text2 = this.headers[i].toLowerCase().trim();
	
		if ( text1 == text2 )
		{
			column = i; break;
		}
	}

	if ( -1 != column )
	{
		var array = this.rows[row];
			value = array[column];
	}
	
	return value;
}
~



~share/js/CSVFile.js~
CSVFile.prototype.getNrOfRows
=
function()
{
	return this.rows.length;
}
~



... Helper functions

~share/js/CSVFile.js~
CSVFile.prototype.CSVLineRE = new RegExp('("[\\w ,]+" ?|[\\w ]*), ?("[\\w ,]+" ?|[\\w ]*)$');

CSVFile.prototype.parseContent
=
function( file_content )
{
	var line_reader = new CSVFile.LineReader( file_content, 10000 );
	var line  = line_reader.readLine();
	if ( false !== line )
	{
        var trimmed = line.trim(); //trims CRs from Mac apps such as Numbers.
        //if (!this.CSVLineRE.test(trimmed)) throw "Header of file does not match expected Excel/LibreOffice CSV format."
		this.headers = CSVFile.SplitAndTrim( trimmed );


		while ( (false !== (line = line_reader.readLine())) )
		{
			var fields = CSVFile.SplitAndTrim( line );

			if ( "" != fields.join( "" ) )
			{
				this.rows.push( fields );
			}
		}
	}
}

CSVFile.SplitAndTrim
=
function( line )
{
	var array = new Array();
	var bits  = CSVFile.SplitWhileRespectingQuotes( line, "," );
	var n     = bits.length;
	
	for ( var i=0; i < n; i++ )
	{
		var field = bits[i];
			field = field.trim();

		if ( "" != field )
		{
			var x     = field.length - 1;

			if ( '"' == field.charAt( x ) ) field = field.substring( 0, x );
			if ( '"' == field.charAt( 0 ) ) field = field.substring( 1    );

			field = field.trim();
		}
	
		array.push( field );
	}

	return array;
}

CSVFile.SplitWhileRespectingQuotes
=
function( line, delimiter )
{
	var array = Array();
	var out   = true;
	var s     = 0;
	var n     = line.length;
	
	for ( var i=0; i < n; i++ )
	{
		switch ( line.charAt( i ) )
		{
		case '"':
			out = !out;
			break;
			
		case delimiter:
			if ( out )
			{
				array.push( line.substring( s, i ) );
				s = i + 1;
			}
			break;
		}
	}
	
	if ( s < n )
	{
		array.push( line.substring( s, n ) );
	}
	
	return array;
}

CSVFile.LineReader
=
function( file_content, limit )
{
	this.content = file_content;
	this.pos     = 0;
	this.lines   = 0;
	this.limit   = limit;
}

CSVFile.LineReader.prototype.readLine
=
function()
{
	var line = false;
	var loop = true;

	if ( ++this.lines < this.limit )
	{
		if ( this.pos < this.content.length )
		{
			line = "";
		
			while ( this.pos < this.content.length )
			{
				var ch = this.content[this.pos++];
				
				if ( '\n' == ch )
				{
					break;
				}
				else
				{
					line += ch;
				}
			}
		}
	}

	return line;
}
~
